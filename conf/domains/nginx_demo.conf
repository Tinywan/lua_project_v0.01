#upstream
upstream item_http_upstream {
    server 192.168.1.1 max_fails=2 fail_timeout=30s weight=5;
    server 192.168.1.2 max_fails=2 fail_timeout=30s weight=5;
}
proxy_cache_path  /mnt/hgfs/Linux-Share/Lua/lua_project_v0.01/cache/proxy_cache levels=1:2 keys_zone=cache_item:200m inactive=1m max_size=30g;
#缓存
lua_shared_dict item_local_shop_cache 600m;
# the size depends on the number of servers in upstream {}:
lua_shared_dict healthcheck 1m;
lua_shared_dict ip_blacklist 1m;
#lua_socket_log_errors off;
server {
    listen       8080;
    server_name  localhost;
    index  index.php index.html index.htm;
    set $project_path /mnt/hgfs/Linux-Share/Lua/;  # 定义项目根目录，如项目放在/home/www/
    set $web_root "${project_path}lua_project_v0.01/template/websocket";

    location / {
        root $web_root;
    }

    # cjson  decode 失败，500 错误直接退
    location /cjson_decode_pcall {
        default_type 'text/html';
        content_by_lua_file "${project_path}lua_project_v0.01/application/demo/cjson.lua";
        #content_by_lua_file "/home/www/lua_project_v0.01/application/demo/cjson.lua";
    }

    #test_ip_location
    location /test_ip_location {
        resolver 8.8.8.8; # dns
        default_type "text/plain";
        content_by_lua_file "${project_path}lua_project_v0.01/application/demo/ip_location.lua";
        #content_by_lua_file "/mnt/hgfs/Linux-Share/Lua/lua_project_v0.01/application/demo/ip_location.lua";
    }

    # redis option
    location /get_redis_iresty {
        default_type 'text/html';
        content_by_lua_file "${project_path}lua_project_v0.01/application/get_redis_iresty.lua";
    }

    #  test_redis_long
    location /test_redis_short {
        default_type 'text/html';
        content_by_lua_file "${project_path}lua_project_v0.01/application/redis/test_short.lua";
    }

    #  test_redis_long
    location /test_redis_long {
        default_type 'text/html';
        content_by_lua_file "${project_path}lua_project_v0.01/application/redis/test_long.lua";
    }

    #  redis_iresty_short.lua
    location /redis_iresty_short {
        default_type 'text/html';
        content_by_lua_file "${project_path}lua_project_v0.01/application/redis/redis_iresty_short.lua";
    }

    #  test_redis_long
    location /redis_iresty_long {
        default_type 'text/html';
        content_by_lua_file "${project_path}lua_project_v0.01/application/redis/redis_iresty_long.lua";
    }

    # shell
    location /shell_test {
      content_by_lua_block {
        local shell = require("resty.shell")
        local args = {
                socket = "unix:/tmp/shell.sock",
            }
            -- local status, out, err = shell.execute("cat /proc/cpuinfo", args)
            ngx.header.content_type = "text/plain"
            ngx.say("Hello from:\n" .. out)
        }
   }

   # shell
   location /shell_websocket {
      content_by_lua_block {
        local shell = require("resty.shell")
        local args = {
                socket = "unix:/tmp/shell.sock",
            }
            local status, out, err = shell.execute("nohup websocketd --port=8082 /home/tinywan/Go/count.sh 2>&1 &", args)
            ngx.header.content_type = "text/plain"
            ngx.say("Hello from:\n")
        }
   }

   #ngx_timer_at
   location /ngx_timer_at {
        default_type 'text/html';
        content_by_lua_file /home/tinywan/Openresty_Protect/First_Protect/lua/get_timer_at.lua;
    }

   # websocket系统负载统计
   location =/vmstats {
        default_type text/html;
        content_by_lua_file /mnt/hgfs/Linux-Share/Lua/lua_project_v0.01/application/websocket_server.lua;
   }

   # lua-resty-websocket 官方测试案例
   location /lua_websocket_server {
       default_type text/html;
       content_by_lua_file "${project_path}lua_project_v0.01/application/lua_websocket_server.lua";
   }

    # mysql 官方测试案例
    location /mysql_server {
      default_type text/html;
      content_by_lua_file "${project_path}lua_project_v0.01/application/mysql/mysql.lua";
    }

    location /mysql_fun {
      default_type text/html;
      content_by_lua_file "${project_path}lua_project_v0.01/application/mysql/mysql_fun.lua";
    }

    location /mysql_fun_test {
      default_type text/html;
      content_by_lua_file "${project_path}lua_project_v0.01/application/mysql/mysql_fun_test.lua";
    }

    # ngx_re_match 官方测试案例
    location /ngx_re_match {
      default_type text/html;
      content_by_lua_block {
          local m, err = ngx.re.match("/live/4001493201083111111.m3u8", "[0-9]+")
           if m then
               -- m[0] == "1234"
               ngx.say("makcj::",m[0])
           else
               if err then
                   ngx.log(ngx.ERR, "error: ", err)
                   return
               end
               ngx.say("match not found")
           end
      }
    }

    #test_mysql
    location /test_mysql {
        resolver 8.8.8.8; # dns;
        default_type "text/plain";
        content_by_lua_file "/mnt/hgfs/Linux-Share/Lua/lua_project_v0.01/application/mysql/mysql.lua";
    }

    # os.execute 测试 标准os库
    location /os_execute {
      content_by_lua_block {
        --文件重命名
        local ret = os.rename("/home/tinywan/shell/123TEST", "/home/tinywan/shell/123TEST_rename")
        ngx.say(ret)
        -- 删除一个文件
        local ret = os.remove("/home/tinywan/shell/tinywan123.sh")
        ngx.say(ret)
        local ret = os.execute("mkdir /home/tinywan/shell/123TEST_execute")
        ngx.say(ret)
      }
   }

    # 产品列表 nginx proxy cache 使用
    location /2017TinywanInfo {
       # set $skuId $1;
       expires 3m;                         # 设置响应缓存头信息，此处是3分钟；将会得到Cache-Control:max-age=180和类似Expires:Sat, 28 Feb 2015 10:01:10 GMT的响应头
       proxy_cache cache_item;             # 使用名为cache_item的对应缓存配置
       proxy_cache_key $uri;               # 定义缓存唯一key,通过唯一key来进行hash存取，缓存key为uri，不包括host和参数，这样不管用户怎么通过在url上加随机数都是走缓存的
       #proxy_cache_bypass $item_dynamic;   # nginx不从缓存取响应的条件，可以写多个
       #proxy_no_cache $item_dynamic;       # nginx不将响应内容写入缓存的条件，可以写多个
       proxy_cache_valid 200 301 3m;       # 为不同的响应状态码设置不同的缓存时间，此处我们对200、301缓存3分钟
       proxy_cache_use_stale updating error timeout invalid_header http_500 http_502 http_503 http_504; # 什么情况下使用不新鲜（过期）的缓存内容
       proxy_pass_request_headers off;     # 我们不需要请求头，所以不传递
       proxy_set_header Host $host;    # 自定义http header头，用于发送给后端真实服务器
       #支持keep-alive
       proxy_http_version 1.1;         # 1.1和proxy_set_header Connection ""：支持keepalive
       proxy_set_header Connection "";
       proxy_pass http://127.0.0.1:8083;
       add_header X-Cache '$upstream_cache_status';        #添加是否缓存命中的响应头；比如命中HIT、不命中MISS、不走缓存BYPASS；比如命中会看到X-Cache：HIT响应头
    }

    # 清理缓存配置proxy_cache
    location /purge {
       allow     127.0.0.1;
       #allow     192.168.1.0/16;
       deny      all;
       #proxy_cache_purge  cache_item $arg_url;
    }

    location /cjson {
       content_by_lua_file "/mnt/hgfs/Linux-Share/Lua/lua_project_v0.01/application/demo/cjson.lua";
    }

    # lua-resty-template test
    location /template_test {
      default_type 'text/html';
      content_by_lua '
           local template = require "resty.template"
           template.render("index2.html", { message = "Hello, World!" })
      ';
    }

    # 模板渲染 带有控制器数据的模板渲染
    location /template_test111 {
      default_type 'text/html';
      content_by_lua '
           local template = require "resty.template"
           template.render("index.html", { message = "Hello, World!" })
      ';
    }

    # lua 的 capture 和 capture_multi(子查询)
    location /capture {
        content_by_lua_file "${project_path}lua_project_v0.01/application/ngx_lua_API/capture.lua";
    }

    location ~ \.php$ {
       fastcgi_pass   unix:/var/run/php7.0.9-fpm.sock;
       fastcgi_index  index.php;
       fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;
       include        fastcgi_params;
    }

    #-------------------------------------------------cookie 的使用
    location ~ /header_add {
        content_by_lua_block {
                ngx.print(ngx.var.http_cookie)
                is_internal = ngx.req.is_internal()
                ngx.print(is_internal)
                local request_time = ngx.now() - ngx.req.start_time()
                ngx.print(request_time)
        }
        #header_filter_by_lua_file "${project_path}lua_project_v0.01/application/demo/company_branch/header_filter.lua";
    }
}

